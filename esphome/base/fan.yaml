###
##
# Controlling fan
number:
  # Demand ventialtion: (ingress)
  - name: ${f_2010} 
    platform: modbus_controller
    modbus_controller_id: ${modbus_id}
    id: fan_demand_value
    icon: mdi:home-import-outline
    register_type: holding
    address: 2010
    min_value: 0
    max_value: 399
    step: 1
    value_type: U_WORD
    use_write_multiple: true
    on_value_range:
      - above: 2.0
        then: 
          - number.set:
              id: fan_demand_on_off
              value: 1.0
      - below: 1.0
        then:
          - number.set:
              id: fan_demand_on_off
              value: 0.0
  - name: ${f_2011}
    platform: modbus_controller
    modbus_controller_id: ${modbus_id}
    id: fan_demand_on_off
    register_type: holding
    address: 2011
    min_value: 0
    max_value: 1
    step: 1
    use_write_multiple: true
    icon: mdi:toggle-switch-variant
  # Demand ventialtion: (exhaust)
  - name: ${f_2012}
    address: 2012
    id: fan_exhaust_demand_value
    unit_of_measurement: m3/h
    #value_type: U_WORD
    min_value: 0
    max_value: ${max_cap}
    step: 1
    register_type: holding
    platform: modbus_controller
    modbus_controller_id: ${modbus_id}
    icon: mdi:home-export-outline
    on_value_range:
      - above: 2.0
        then: 
          - number.set:
              id: fan_flow_exhaust_on_off
              value: 1.0
      - below: 1.0
        then:
          - number.set:
              id: fan_flow_exhaust_on_off
              value: 0.0
  - name: ${f_2013}
    id: fan_flow_exhaust_on_off
    address: 2013
    #value_type: U_WORD
    min_value: 0
    max_value: 1
    step: 1
    register_type: holding
    platform: modbus_controller
    modbus_controller_id: ${modbus_id}
    use_write_multiple: true
    icon: mdi:toggle-switch-variant
  ## By Flow
  - name: ${f_2020}
    platform: modbus_controller
    modbus_controller_id: ${modbus_id}
    id: fan_flow_ingress_value
    icon: mdi:home-import-outline
    register_type: holding
    address: 2020
    min_value: 0
    max_value: 399
    step: 1
    value_type: U_WORD
    use_write_multiple: true
    on_value_range:
      - above: 2.0
        then: 
          - number.set:
              id: fan_flow_ingress_on_off
              value: 1.0
      - below: 1.0
        then:
          - number.set:
              id: fan_flow_ingress_on_off
              value: 0.0
  - name: ${f_2021}
    platform: modbus_controller
    modbus_controller_id: ${modbus_id}
    id: fan_flow_ingress_on_off
    register_type: holding
    address: 2021
    min_value: 0
    max_value: 1
    step: 1
    use_write_multiple: true
    icon: mdi:toggle-switch-variant

###
# Create a fan entity in HA.
fan:
  - platform: speed
    id: wtw_fan
    name: "WTW - Fan"
    output: fanoutput
    # Create 7 speed van from 100 to 399 in 50 increments
    speed_count: 7 
    restore_mode: RESTORE_DEFAULT_OFF

###
# Output of the fan.
output:
  - platform: template
    id: fanoutput
    type: float
    # Wish it was a shorter lambda but here we are it works
    write_action:
      - if:
          condition:
            # If we turn the fan on, change the speed of the fan. 
            lambda: return (id(wtw_fan).state);
          then:
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 1);
                then:
                  - logger.log: "fan_output_value: 1"
                  - number.set: { id: fan_demand_on_off, value: 1.0 }
                  - number.set: { id: fan_demand_value, value: 100 }
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 2);
                then:
                  - logger.log: "fan_output_value: 2"
                  - number.set: { id: fan_demand_on_off, value: 1.0 }
                  - number.set: { id: fan_demand_value, value: 150 }
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 3);
                then:
                  - logger.log: "fan_output_value: 3"
                  - number.set: { id: fan_demand_on_off, value: 1.0 }
                  - number.set: { id: fan_demand_value, value: 200 }
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 4);
                then:
                  - logger.log: "fan_output_value: 4"
                  - number.set: { id: fan_demand_on_off, value: 1.0 }
                  - number.set: { id: fan_demand_value, value: 250 }
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 5);
                then:
                  - logger.log: "fan_output_value: 5"
                  - number.set: { id: fan_demand_on_off, value: 1.0 }
                  - number.set: { id: fan_demand_value, value: 300 }
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 6);
                then:
                  - logger.log: "fan_output_value: 6"
                  - number.set: { id: fan_demand_on_off, value: 1.0 }
                  - number.set: { id: fan_demand_value, value: 350 }
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 7);
                then:
                  - logger.log: "fan_output_value: 7"
                  - number.set: { id: fan_demand_on_off, value: 1.0 }
                  - number.set: { id: fan_demand_value, value: 399 }
      - if:
          condition:
            # If we turn the fan off.
            lambda: return !(id(wtw_fan).state);
          then:
            - logger.log: "fan_output_value: Back to auto"
            - number.set: { id: fan_demand_on_off, value: 0.0 }


